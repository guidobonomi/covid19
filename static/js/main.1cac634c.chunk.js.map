{"version":3,"sources":["components/ChoroplethMap.js","App.js","index.js"],"names":["ChoroplethMap","Component","fetchData","date","fetch","then","response","json","d","perProvinceMap","filter","sigla_provincia","totale_casi","allValues","map","dataMap","data","startsWith","min","Math","apply","max","values","Array","from","createDataSet","paletteScale","d3","scale","linear","domain","range","dataset","forEach","item","iso","value","numberOfThings","fillColor","createDataMap","Datamap","element","document","getElementById","scope","geographyConfig","popupOnHover","highlightOnHover","borderColor","highlightBorderWidth","borderWidth","dataJson","topologyJson","popupTemplate","geo","properties","name","join","fills","UNKNOWN","defaultFill","setProjection","projection","mercator","center","translate","offsetWidth","offsetHeight","path","componentDidMount","yesterday","Date","setDate","getDate","toISOString","substring","this","render","id","style","height","width","App","ReactDOM"],"mappings":"gmsGAKA,MAAMA,UAAsBC,YAAW,eAAD,oBAUlCC,UAAaC,GACFC,MAAM,qGACRC,KAAMC,GACIA,EAASC,QAEnBF,KAAMG,IACH,MAAMC,EAAiBD,EAAEE,OAAOF,GACrBA,EAAEG,iBAAmBH,EAAEI,aAG5BC,EAAYJ,EAAeK,IAAIN,GAC1BA,EAAEI,aAGPG,EAAUN,EAAeC,OAAOF,GAC3BA,EAAEQ,KAAKC,WAAWd,IAC1BW,IAAIN,GACI,CAACA,EAAEG,gBAAiBH,EAAEI,cAGjC,MAAO,CACHM,IAAKC,KAAKD,IAAIE,MAAMD,KAAMN,GAC1BQ,IAAKF,KAAKE,IAAID,MAAMD,KAAMN,GAC1BS,OAAQC,MAAMC,KAAKT,EAAQO,aAjCT,KAsClCG,cAAiBT,IACb,IAAIU,EAAeC,IAAGC,MAAMC,SACvBC,OAAO,CAACd,EAAKE,IAAKF,EAAKK,MACvBU,MAAM,CAAC,UAAW,QAEnBC,EAAU,GAWd,OATAhB,EAAKM,OAAOW,SAAQ,SAAUC,GAC1B,MAAMC,EAAMD,EAAK,GACbE,EAAQF,EAAK,GACjBF,EAAQG,GAAO,CACXE,eAAgBD,EAChBE,UAAWZ,EAAaU,OAIzBJ,GAtDuB,KAyDlCO,cAAiBP,IACb,IAAIQ,IAAQ,CACRC,QAASC,SAASC,eAAe,kBACjCC,MAAO,QACPC,gBAAiB,CACbC,cAAc,EACdC,kBAAkB,EAClBC,YAAa,OACbC,qBAAsB,EACtBC,YAAa,GACbC,SAAUC,EACVC,cAAe,SAAUC,EAAKtC,GAC1B,IAAIqB,EAAiBrB,EAAOA,EAAKqB,eAAiB,EAElD,MAAO,CAAC,0BACJ,WAAYiB,EAAIC,WAAWC,KAAM,YACjC,sBAAuBnB,EAAgB,YACvC,UAAUoB,KAAK,MAG3BC,MAAO,CACHC,QAAS,aACTC,YAAa,SAEjB5C,KAAMgB,EACN6B,cAAe,SAAUpB,GACrB,IAAIqB,EAAanC,IAAG2B,IAAIS,WACnBC,OAAO,CAAC,GAAI,KACZpC,MAAM,KACNqC,UAAU,CAACxB,EAAQyB,YAAc,EAAGzB,EAAQ0B,aAAe,IAGhE,MAAO,CAAEC,KADEzC,IAAG2B,IAAIc,OAAON,WAAWA,GACfA,WAAYA,OAxF7CO,oBACI,MAAMC,EAAY,IAAIC,MAAK,IAAIA,MAAOC,SAAQ,IAAID,MAAOE,UAAY,IAChEC,cAAcC,UAAU,EAAG,IAEhCC,KAAK1E,UAAUoE,GACVjE,KAAKuE,KAAKnD,eACVpB,KAAKuE,KAAKrC,eAuFnBsC,SACI,OACI,yBAAKC,GAAG,iBAAiBC,MAAO,CAC5BC,OAAQ,OACRC,MAAO,WAMRjF,QCxGf,MAAMkF,UAAYjF,YAChB4E,SACE,OACE,yBAAKE,MAAO,CACVC,OAAO,QACPC,MAAO,UAEP,kBAAC,EAAD,QAMOC,QCbfC,IAASN,OAAO,kBAAC,EAAD,MAASnC,SAASC,eAAe,W","file":"static/js/main.1cac634c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Datamap from 'datamaps/dist/datamaps.world.min.js';\nimport d3 from 'd3';\nimport topologyJson from './topology.json';\n\nclass ChoroplethMap extends Component {\n    componentDidMount() {\n        const yesterday = new Date(new Date().setDate(new Date().getDate() - 1))\n            .toISOString().substring(0, 10);\n\n        this.fetchData(yesterday)\n            .then(this.createDataSet)\n            .then(this.createDataMap);\n    }\n\n    fetchData = (date) => {\n        return fetch('https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-province.json')\n            .then((response) => {\n                return response.json();\n            })\n            .then((d) => {\n                const perProvinceMap = d.filter(d => {\n                    return d.sigla_provincia && d.totale_casi;\n                });\n\n                const allValues = perProvinceMap.map(d => {\n                    return d.totale_casi\n                });\n\n                const dataMap = perProvinceMap.filter(d => {\n                    return d.data.startsWith(date);\n                }).map(d => {\n                    return [d.sigla_provincia, d.totale_casi]\n                })\n\n                return {\n                    min: Math.min.apply(Math, allValues),\n                    max: Math.max.apply(Math, allValues),\n                    values: Array.from(dataMap.values()),\n                };\n            })\n    }\n\n    createDataSet = (data) => {\n        let paletteScale = d3.scale.linear()\n            .domain([data.min, data.max])\n            .range([\"#FFFFDD\", \"red\"]);\n\n        let dataset = {};\n\n        data.values.forEach(function (item) {\n            const iso = item[0],\n                value = item[1];\n            dataset[iso] = {\n                numberOfThings: value,\n                fillColor: paletteScale(value)\n            };\n        });\n\n        return dataset;\n    }\n\n    createDataMap = (dataset) => {\n        new Datamap({\n            element: document.getElementById('cloropleth_map'),\n            scope: 'italy',\n            geographyConfig: {\n                popupOnHover: true,\n                highlightOnHover: true,\n                borderColor: '#444',\n                highlightBorderWidth: 1,\n                borderWidth: 0.5,\n                dataJson: topologyJson,\n                popupTemplate: function (geo, data) {\n                    let numberOfThings = data ? data.numberOfThings : 0;\n                    // tooltip content\n                    return ['<div class=\"hoverinfo\">',\n                        '<strong>', geo.properties.name, '</strong>',\n                        '<br>Count: <strong>', numberOfThings, '</strong>',\n                        '</div>'].join('');\n                }\n            },\n            fills: {\n                UNKNOWN: 'rgb(0,0,0)',\n                defaultFill: 'white'\n            },\n            data: dataset,\n            setProjection: function (element) {\n                var projection = d3.geo.mercator()\n                    .center([13, 42])\n                    .scale(1000)\n                    .translate([element.offsetWidth / 2, element.offsetHeight / 2]);\n\n                var path = d3.geo.path().projection(projection);\n                return { path: path, projection: projection };\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div id=\"cloropleth_map\" style={{\n                height: \"100%\",\n                width: \"100%\",\n            }}></div>\n        );\n    }\n}\n\nexport default ChoroplethMap;","import React, { Component } from 'react';\nimport './App.css';\n\nimport ChoroplethMap from './components/ChoroplethMap';\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={{\n        height:\"100vh\",\n        width: \"100vw\"\n      }}>\n        <ChoroplethMap/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}