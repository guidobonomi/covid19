{"version":3,"sources":["components/ChoroplethMap.js","App.js","index.js"],"names":["ChoroplethMap","fetch","then","response","json","d","myMap","filter","yesterday","Date","setDate","getDate","toISOString","substring","data","startsWith","sigla_provincia","map","totale_casi","Array","from","values","uniqValues","obj","minValue","Math","min","apply","maxValue","max","paletteScale","d3","scale","linear","domain","range","dataset","forEach","item","iso","value","numberOfThings","fillColor","Datamap","element","document","getElementById","scope","geographyConfig","popupOnHover","highlightOnHover","borderColor","highlightBorderWidth","borderWidth","dataJson","topologyJson","popupTemplate","geo","properties","name","join","fills","UNKNOWN","defaultFill","setProjection","projection","mercator","center","translate","offsetWidth","offsetHeight","path","react_default","a","createElement","id","style","height","width","Component","App","components_ChoroplethMap","ReactDOM","render","src_App_0"],"mappings":"ggqGAwFeA,8LAjFPC,MAAM,qGACDC,KAAK,SAACC,GACH,OAAOA,EAASC,SAEnBF,KAAK,SAACG,GACH,IAAMC,EAAQD,EAAEE,OAAO,SAAAF,GACnB,IAAMG,EAAY,IAAIC,MAAK,IAAIA,MAAOC,SAAQ,IAAID,MAAOE,UAAY,IAChEC,cAAcC,UAAU,EAAG,IAChC,OAAOR,EAAES,KAAKC,WAAWP,IAAcH,EAAEW,kBAC1CC,IAAI,SAAAZ,GACH,MAAO,CAACA,EAAEW,gBAAiBX,EAAEa,eAG3BJ,EAAOK,MAAMC,KAAKd,EAAMe,UAE1BC,EAAaR,EAAKG,IAAI,SAAUM,GAAO,OAAOA,EAAI,KAClDC,EAAWC,KAAKC,IAAIC,MAAM,KAAML,GAChCM,EAAWH,KAAKI,IAAIF,MAAM,KAAML,GAEhCQ,EAAeC,IAAGC,MAAMC,SACvBC,OAAO,CAACV,EAAUI,IAClBO,MAAM,CAAC,UAAW,QAEnBC,EAAU,GAEdtB,EAAKuB,QAAQ,SAAUC,GACnB,IAAMC,EAAMD,EAAK,GACbE,EAAQF,EAAK,GACjBF,EAAQG,GAAO,CACXE,eAAgBD,EAChBE,UAAWZ,EAAaU,MAIhC,IAAIG,IAAQ,CACRC,QAASC,SAASC,eAAe,kBACjCC,MAAO,QACPC,gBAAiB,CACbC,cAAc,EACdC,kBAAkB,EAClBC,YAAa,OACbC,qBAAsB,EACtBC,YAAa,GACbC,SAAUC,EACVC,cAAe,SAAUC,EAAK3C,GAC1B,IAAI2B,EAAiB3B,EAAOA,EAAK2B,eAAiB,EAElD,MAAO,CAAC,0BACJ,WAAYgB,EAAIC,WAAWC,KAAM,YACjC,sBAAuBlB,EAAgB,YACvC,UAAUmB,KAAK,MAG3BC,MAAO,CACHC,QAAS,aACTC,YAAa,SAEjBjD,KAAMsB,EACN4B,cAAe,SAAUpB,GACrB,IAAIqB,EAAalC,IAAG0B,IAAIS,WACnBC,OAAO,CAAC,GAAI,KACZnC,MAAM,MACNoC,UAAU,CAACxB,EAAQyB,YAAc,EAAGzB,EAAQ0B,aAAe,IAGhE,MAAO,CAAEC,KADExC,IAAG0B,IAAIc,OAAON,WAAWA,GACfA,WAAYA,yCAOjD,OACIO,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBAAiBC,MAAO,CAC5BC,OAAQ,OACRC,MAAO,iBA7EKC,aCabC,mLAXX,OACER,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CACVC,OAAO,QACPC,MAAO,UAEPN,EAAAC,EAAAC,cAACO,EAAD,cAPUF,aCAlBG,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAASvC,SAASC,eAAe","file":"static/js/main.9824f9e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Datamap from 'datamaps/dist/datamaps.world.min.js';\nimport d3 from 'd3';\nimport topologyJson from './topology.json';\n\nclass ChoroplethMap extends Component {\n    componentDidMount() {\n        fetch('https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-province.json')\n            .then((response) => {\n                return response.json();\n            })\n            .then((d) => {\n                const myMap = d.filter(d => {\n                    const yesterday = new Date(new Date().setDate(new Date().getDate() - 1))\n                        .toISOString().substring(0, 10);\n                    return d.data.startsWith(yesterday) && d.sigla_provincia;\n                }).map(d => {\n                    return [d.sigla_provincia, d.totale_casi]\n                })\n\n                const data = Array.from(myMap.values());\n\n                let uniqValues = data.map(function (obj) { return obj[1]; });\n                let minValue = Math.min.apply(null, uniqValues),\n                    maxValue = Math.max.apply(null, uniqValues);\n\n                let paletteScale = d3.scale.linear()\n                    .domain([minValue, maxValue])\n                    .range([\"#FFFFDD\", \"red\"]);\n\n                let dataset = {};\n\n                data.forEach(function (item) {\n                    const iso = item[0],\n                        value = item[1];\n                    dataset[iso] = {\n                        numberOfThings: value,\n                        fillColor: paletteScale(value)\n                    };\n                });\n\n                new Datamap({\n                    element: document.getElementById('cloropleth_map'),\n                    scope: 'italy',\n                    geographyConfig: {\n                        popupOnHover: true,\n                        highlightOnHover: true,\n                        borderColor: '#444',\n                        highlightBorderWidth: 1,\n                        borderWidth: 0.5,\n                        dataJson: topologyJson,\n                        popupTemplate: function (geo, data) {\n                            let numberOfThings = data ? data.numberOfThings : 0;\n                            // tooltip content\n                            return ['<div class=\"hoverinfo\">',\n                                '<strong>', geo.properties.name, '</strong>',\n                                '<br>Count: <strong>', numberOfThings, '</strong>',\n                                '</div>'].join('');\n                        }\n                    },\n                    fills: {\n                        UNKNOWN: 'rgb(0,0,0)',\n                        defaultFill: 'white'\n                    },\n                    data: dataset,\n                    setProjection: function (element) {\n                        var projection = d3.geo.mercator()\n                            .center([13, 42])\n                            .scale(2500)\n                            .translate([element.offsetWidth / 2, element.offsetHeight / 2]);\n\n                        var path = d3.geo.path().projection(projection);\n                        return { path: path, projection: projection };\n                    }\n                });\n            });\n    }\n\n    render() {\n        return (\n            <div id=\"cloropleth_map\" style={{\n                height: \"100%\",\n                width: \"100%\",\n            }}></div>\n        );\n    }\n}\n\nexport default ChoroplethMap;","import React, { Component } from 'react';\nimport './App.css';\n\nimport ChoroplethMap from './components/ChoroplethMap';\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={{\n        height:\"100vh\",\n        width: \"100vw\"\n      }}>\n        <ChoroplethMap/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}