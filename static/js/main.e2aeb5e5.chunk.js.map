{"version":3,"sources":["components/ChoroplethMap.js","components/DateSelector.js","App.js","index.js"],"names":["ChoroplethMap","Component","constructor","props","super","this","state","current","createDataSet","bind","componentDidMount","dataset","createDataMap","componentDidUpdate","prev","data","values","paletteScale","d3","scale","linear","domain","min","max","range","forEach","item","iso","value","numberOfThings","fillColor","document","getElementById","innerHTML","Datamap","element","scope","geographyConfig","popupOnHover","highlightOnHover","borderColor","highlightBorderWidth","borderWidth","dataJson","topologyJson","popupTemplate","geo","properties","name","join","fills","UNKNOWN","defaultFill","setProjection","projection","mercator","center","translate","offsetWidth","offsetHeight","path","render","id","style","height","width","DateSelector","onChange","event","callback","target","options","dayjs","from","to","subtract","isAfter","key","format","option","push","add","App","originalDataset","currentDate","currentDataset","onDateChange","fetch","then","response","json","setState","filterData","perProvinceMap","filter","d","sigla_provincia","totale_casi","allValues","map","dataMap","startsWith","Math","apply","Array","prevState","date","ReactDOM"],"mappings":"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","file":"static/js/main.e2aeb5e5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Datamap from 'datamaps/dist/datamaps.world.min.js';\nimport d3 from 'd3';\nimport topologyJson from './topology.json';\n\nclass ChoroplethMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: this.props.current\n    };\n    this.createDataSet = this.createDataSet.bind(this);\n  }\n\n  componentDidMount() {\n    if (!this.props.dataset) {\n      return;\n    }\n    this.createDataMap(this.createDataSet(this.props.dataset));\n  }\n\n  componentDidUpdate(prev) {\n    if (!this.props.dataset || this.props.dataset === prev.dataset) {\n      return;\n    }\n    this.createDataMap(this.createDataSet(this.props.dataset));\n  }\n\n  createDataSet(data) {\n    if (!data || !data.values) {\n      return;\n    }\n    let paletteScale = d3.scale\n      .linear()\n      .domain([data.min, data.max])\n      .range(['#FFFFDD', 'red']);\n\n    let dataset = {};\n\n    data.values.forEach(function(item) {\n      const iso = item[0],\n        value = item[1];\n      dataset[iso] = {\n        numberOfThings: value,\n        fillColor: paletteScale(value)\n      };\n    });\n\n    return dataset;\n  }\n\n  createDataMap(dataset) {\n    document.getElementById('cloropleth_map').innerHTML = '';\n    new Datamap({\n      element: document.getElementById('cloropleth_map'),\n      scope: 'italy',\n      geographyConfig: {\n        popupOnHover: true,\n        highlightOnHover: true,\n        borderColor: '#444',\n        highlightBorderWidth: 1,\n        borderWidth: 0.5,\n        dataJson: topologyJson,\n        popupTemplate: function(geo, data) {\n          let numberOfThings = data ? data.numberOfThings : 0;\n          // tooltip content\n          return [\n            '<div class=\"hoverinfo\">',\n            '<strong>',\n            geo.properties.name,\n            '</strong>',\n            '<br>Count: <strong>',\n            numberOfThings,\n            '</strong>',\n            '</div>'\n          ].join('');\n        }\n      },\n      fills: {\n        UNKNOWN: 'rgb(0,0,0)',\n        defaultFill: 'white'\n      },\n      data: dataset,\n      setProjection: function(element) {\n        var projection = d3.geo\n          .mercator()\n          .center([13, 42])\n          .scale(1800)\n          .translate([element.offsetWidth / 2, element.offsetHeight / 2]);\n\n        var path = d3.geo.path().projection(projection);\n        return { path: path, projection: projection };\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div\n        id=\"cloropleth_map\"\n        style={{\n          height: '100%',\n          width: '100%'\n        }}\n      ></div>\n    );\n  }\n}\n\nexport default ChoroplethMap;\n","import React, { Component } from 'react';\n\nimport dayjs from 'dayjs';\n\nclass DateSelector extends Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event) {\n    this.props.callback(event.target.value);\n  }\n\n  render() {\n    let options = [];\n    let current = dayjs(this.props.from);\n    let to = dayjs().subtract(1, 'd');\n    while (!current.isAfter(to)) {\n      let key = current.format('YYYY-MM-DD');\n      let option = (\n        <option value={key} key={key}>\n          {current.format('DD MMM, YYYY')}\n        </option>\n      );\n      options.push(option);\n      current = current.add(1, 'd');\n    }\n\n    let selector = (\n      <select onChange={this.onChange} value={this.props.current}>\n        {options}\n      </select>\n    );\n    return selector;\n  }\n}\n\nexport default DateSelector;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport ChoroplethMap from './components/ChoroplethMap';\nimport DateSelector from './components/DateSelector';\nimport dayjs from 'dayjs';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      originalDataset: [],\n      currentDate: dayjs()\n        .subtract(1, 'd')\n        .format('YYYY-MM-DD'),\n      currentDataset: null\n    };\n    this.onDateChange = this.onDateChange.bind(this);\n  }\n\n  componentDidMount() {\n    return fetch(\n      'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-province.json'\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(dataset => {\n        this.setState(\n          {\n            originalDataset: dataset,\n            currentDate: this.state.currentDate,\n            currentDataset: null\n          },\n          this.filterData\n        );\n      });\n  }\n\n  filterData() {\n    const perProvinceMap = this.state.originalDataset.filter(d => {\n      return d.sigla_provincia && d.totale_casi;\n    });\n\n    const allValues = perProvinceMap.map(d => {\n      return d.totale_casi;\n    });\n\n    const dataMap = perProvinceMap\n      .filter(d => {\n        return d.data.startsWith(this.state.currentDate);\n      })\n      .map(d => {\n        return [d.sigla_provincia, d.totale_casi];\n      });\n\n    const dataset = {\n      min: Math.min.apply(Math, allValues),\n      max: Math.max.apply(Math, allValues),\n      values: Array.from(dataMap.values())\n    };\n\n    this.setState(prevState => ({\n      originalDataset: prevState.originalDataset,\n      currentDate: prevState.currentDate,\n      currentDataset: dataset\n    }));\n  }\n\n  onDateChange(date) {\n    this.setState(\n      prevState => ({\n        originalDataset: prevState.originalDataset,\n        currentDataset: prevState.currentDataset,\n        currentDate: date\n      }),\n      this.filterData\n    );\n  }\n\n  render() {\n    if (!this.state) {\n      return <div></div>;\n    }\n\n    return (\n      <div\n        style={{\n          height: '100vh',\n          width: '100vw'\n        }}\n      >\n        <DateSelector\n          from=\"2020-02-25\"\n          current={this.state.currentDate}\n          callback={this.onDateChange}\n        />\n        <ChoroplethMap dataset={this.state.currentDataset} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}